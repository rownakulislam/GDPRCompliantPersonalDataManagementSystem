{"ast":null,"code":"var _jsxFileName = \"C:\\\\thesis_project_start\\\\Ethereum-DappV2\\\\src\\\\Issue.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './css/Issue.css';\nimport { create } from 'ipfs-http-client';\n//import {  Link } from 'react-router-dom';\n\n//let ViewIPFSimage=false;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = create({\n  host: '127.0.0.1',\n  port: 5001,\n  protocol: 'http'\n});\nfunction IssueCertificateComponent() {\n  _s();\n  const [studentName, setStudentName] = useState('');\n  const [degreeName, setDegreeName] = useState('');\n  const [subject, setSubject] = useState('');\n  const [studentAddress, setStudentAddress] = useState('');\n  const [issueResult, setIssueResult] = useState('');\n  const CONTRACT_ADDRESS = '0x5F9B9b81f39730abDfc3932002Eae1F74479480C';\n  const API_KEY = 'rdO0i4o--THH81mB5V3Cb9SE1UiwCtrh';\n  const PRIVATE_KEY = 'ffce87da659a88c5ad63d447fff3be4308b00845bf002861ba91ad0ce5994603';\n  const fileInput = useRef(null);\n  const [fileCid, setFileCid] = useState(null);\n  //const [fileUrl, setFileUrl] = useState(null);\n\n  useEffect(() => {\n    if (fileCid) {\n      console.log(fileCid);\n    }\n  }, [fileCid]);\n  async function handleUploadToIPFS() {\n    const file = fileInput.current.files[0];\n    if (!file) {\n      console.log('No file selected');\n      return;\n    }\n    try {\n      const reader = new FileReader();\n      reader.onloadend = async () => {\n        const {\n          cid\n        } = await client.add(reader.result);\n        console.log(cid);\n        setFileCid(cid.toString());\n      };\n      reader.readAsArrayBuffer(file);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    }\n  }\n  const issueCertificate = async () => {\n    try {\n      const network = 'maticmum';\n      const provider = new ethers.providers.AlchemyProvider(network, API_KEY);\n      const signer = new ethers.Wallet(PRIVATE_KEY, provider);\n      const contractABI = require('./abis/CertificateNFT.json');\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\n      const issueTimestamp = Math.floor(Date.now() / 1000); // Get current timestamp\n\n      if (fileCid) {\n        const transaction = await contract.issueCertificate(studentName, degreeName, subject, studentAddress, issueTimestamp, fileCid);\n        await transaction.wait();\n      } else {\n        console.log('Cid is null');\n      }\n      setIssueResult('Certificate issued successfully!');\n    } catch (error) {\n      console.error('Error issuing certificate:', error);\n      setIssueResult('Failed to issue certificate' + '-->' + error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"issue-certificate-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Issue Certificate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Student Name\",\n      onChange: e => setStudentName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Degree Name\",\n      onChange: e => setDegreeName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Subject\",\n      onChange: e => setSubject(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Student Address\",\n      onChange: e => setStudentAddress(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: fileInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUploadToIPFS,\n      style: {\n        marginBottom: 10\n      },\n      children: \"Upload to IPFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 95\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: issueCertificate,\n      children: \"Issue Certificate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 69\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: issueResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(IssueCertificateComponent, \"TAY6AWSDV6u0a7zO77cX8SdaC0s=\");\n_c = IssueCertificateComponent;\nexport default IssueCertificateComponent;\nvar _c;\n$RefreshReg$(_c, \"IssueCertificateComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ethers","create","jsxDEV","_jsxDEV","client","host","port","protocol","IssueCertificateComponent","_s","studentName","setStudentName","degreeName","setDegreeName","subject","setSubject","studentAddress","setStudentAddress","issueResult","setIssueResult","CONTRACT_ADDRESS","API_KEY","PRIVATE_KEY","fileInput","fileCid","setFileCid","console","log","handleUploadToIPFS","file","current","files","reader","FileReader","onloadend","cid","add","result","toString","readAsArrayBuffer","error","issueCertificate","network","provider","providers","AlchemyProvider","signer","Wallet","contractABI","require","contract","Contract","issueTimestamp","Math","floor","Date","now","transaction","wait","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","value","ref","onClick","style","marginBottom","_c","$RefreshReg$"],"sources":["C:/thesis_project_start/Ethereum-DappV2/src/Issue.jsx"],"sourcesContent":["import React, { useState, useRef,useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport './css/Issue.css'\r\nimport { create } from 'ipfs-http-client';\r\n//import {  Link } from 'react-router-dom';\r\n\r\n//let ViewIPFSimage=false;\r\n\r\nconst client = create({\r\n  host: '127.0.0.1',\r\n  port: 5001,\r\n  protocol: 'http',\r\n});\r\n\r\n\r\nfunction IssueCertificateComponent() {\r\n  const [studentName, setStudentName] = useState('');\r\n  const [degreeName, setDegreeName] = useState('');\r\n  const [subject, setSubject] = useState('');\r\n  const [studentAddress, setStudentAddress] = useState('');\r\n  const [issueResult, setIssueResult] = useState('');\r\n \r\n  const CONTRACT_ADDRESS = '0x5F9B9b81f39730abDfc3932002Eae1F74479480C';\r\n  const API_KEY = 'rdO0i4o--THH81mB5V3Cb9SE1UiwCtrh';\r\n  const PRIVATE_KEY = 'ffce87da659a88c5ad63d447fff3be4308b00845bf002861ba91ad0ce5994603';\r\n  const fileInput = useRef(null);\r\n  const [fileCid, setFileCid] = useState(null);\r\n  //const [fileUrl, setFileUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (fileCid) {\r\n      console.log(fileCid);\r\n    }\r\n  }, [fileCid]);\r\n\r\n  async function handleUploadToIPFS() {\r\n    const file = fileInput.current.files[0];\r\n    if (!file) {\r\n      console.log('No file selected');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const reader = new FileReader();\r\n      reader.onloadend = async () => {\r\n        const {cid}  = await client.add(reader.result);\r\n        console.log(cid);\r\n        setFileCid(cid.toString());\r\n      \r\n      };\r\n      reader.readAsArrayBuffer(file);\r\n      \r\n    } catch (error) {\r\n      \r\n      console.error('Error uploading file:', error);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const issueCertificate = async () => {\r\n    try {\r\n      const network = 'maticmum';\r\n      const provider = new ethers.providers.AlchemyProvider(network, API_KEY);\r\n      const signer = new ethers.Wallet(PRIVATE_KEY, provider);\r\n\r\n      const contractABI = require('./abis/CertificateNFT.json');\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\r\n\r\n      const issueTimestamp = Math.floor(Date.now() / 1000); // Get current timestamp\r\n      \r\n      if(fileCid){\r\n      const transaction = await contract.issueCertificate(\r\n        studentName,\r\n        degreeName,\r\n        subject,\r\n        studentAddress,\r\n        issueTimestamp,\r\n        fileCid\r\n        );\r\n        await transaction.wait();\r\n  \r\n      }\r\n     else{console.log('Cid is null');}\r\n\r\n      setIssueResult('Certificate issued successfully!');\r\n    } catch (error) {\r\n      console.error('Error issuing certificate:', error);\r\n      setIssueResult('Failed to issue certificate' + '-->' + error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='issue-certificate-container'>\r\n      <h1>Issue Certificate</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Student Name\"\r\n        onChange={(e) => setStudentName(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Degree Name\"\r\n        onChange={(e) => setDegreeName(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Subject\"\r\n        onChange={(e) => setSubject(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Student Address\"\r\n        onChange={(e) => setStudentAddress(e.target.value)}\r\n      />\r\n\r\n      <input type=\"file\" ref={fileInput} />\r\n      <button onClick={handleUploadToIPFS} style={{marginBottom:10,}}>Upload to IPFS</button> <br/>\r\n{/* \r\n      <button onClick={() => fetchFileFromIPFS(fileCid)}>View From IPFS</button>  <br/>      */}\r\n      \r\n      <button onClick={issueCertificate}>Issue Certificate</button> <br/>\r\n      <p>{issueResult}</p><br/>\r\n      \r\n\r\n\r\n    </div>\r\n\r\n    \r\n  );\r\n\r\n}\r\n\r\nexport default IssueCertificateComponent;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}