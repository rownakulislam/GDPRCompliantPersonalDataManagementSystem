{"ast":null,"code":"/**\n * Any object that implements this Symbol as a property should return a\n * PeerDiscovery instance as the property value, similar to how\n * `Symbol.Iterable` can be used to return an `Iterable` from an `Iterator`.\n *\n * @example\n *\n * ```js\n * import { peerDiscovery, PeerDiscovery } from '@libp2p/peer-discovery'\n *\n * class MyPeerDiscoverer implements PeerDiscovery {\n *   get [peerDiscovery] () {\n *     return this\n *   }\n *\n *   // ...other methods\n * }\n * ```\n */\nexport const peerDiscoverySymbol = Symbol.for('@libp2p/peer-discovery');","map":{"version":3,"names":["peerDiscoverySymbol","Symbol","for"],"sources":["C:\\thesis_project_start\\Ethereum-DappV2\\node_modules\\@libp2p\\interface\\src\\peer-discovery\\index.ts"],"sourcesContent":["import type { TypedEventTarget } from '../event-target.js'\nimport type { PeerInfo } from '../peer-info/index.js'\n\n/**\n * Any object that implements this Symbol as a property should return a\n * PeerDiscovery instance as the property value, similar to how\n * `Symbol.Iterable` can be used to return an `Iterable` from an `Iterator`.\n *\n * @example\n *\n * ```js\n * import { peerDiscovery, PeerDiscovery } from '@libp2p/peer-discovery'\n *\n * class MyPeerDiscoverer implements PeerDiscovery {\n *   get [peerDiscovery] () {\n *     return this\n *   }\n *\n *   // ...other methods\n * }\n * ```\n */\nexport const peerDiscoverySymbol = Symbol.for('@libp2p/peer-discovery')\n\nexport interface PeerDiscoveryEvents {\n  'peer': CustomEvent<PeerInfo>\n}\n\nexport interface PeerDiscovery extends TypedEventTarget<PeerDiscoveryEvents> {}\n"],"mappings":"AAGA;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,MAAMA,mBAAmB,GAAGC,MAAM,CAACC,GAAG,CAAC,wBAAwB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}