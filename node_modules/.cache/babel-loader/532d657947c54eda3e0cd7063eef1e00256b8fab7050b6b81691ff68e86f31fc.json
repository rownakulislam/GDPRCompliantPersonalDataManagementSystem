{"ast":null,"code":"var _jsxFileName = \"C:\\\\thesis_project_start\\\\Ethereum-DappV2\\\\src\\\\uploadFile.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { create } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = create({\n  host: '127.0.0.1',\n  port: 5001,\n  protocol: 'http'\n});\nfunction UploadFileComponent() {\n  _s();\n  const fileInput = useRef(null);\n  const [fileCid, setFileCid] = useState(null);\n  //const [userAddress, setUserAddress] = useState('');\n  const [recipientAddress, setRecipientAddress] = useState('');\n  const CONTRACT_ADDRESS = \"0x56543E1324a0E83Dfa6FF44F45a1593aFFb6Cd0f\";\n  const API_KEY = \"rdO0i4o--THH81mB5V3Cb9SE1UiwCtrh\";\n  const PRIVATE_KEYA = \"ffce87da659a88c5ad63d447fff3be4308b00845bf002861ba91ad0ce5994603\";\n  const PRIVATE_KEY1 = \"36ac196f099cc8a7d05ef87545c835220f0607a05baf8d48a712a8afbfbddef3\";\n  async function handleUploadToIPFS() {\n    const file = fileInput.current.files[0];\n    if (!file) {\n      console.log('No file selected');\n      return;\n    }\n    try {\n      const reader = new FileReader();\n      reader.onloadend = async () => {\n        const {\n          cid\n        } = await client.add(reader.result);\n        console.log(cid);\n        setFileCid(cid.toString());\n      };\n      reader.readAsArrayBuffer(file);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    }\n  }\n  const handleSendToContract = async () => {\n    try {\n      const network = 'maticmum';\n      const provider = new ethers.providers.AlchemyProvider(network, API_KEY);\n      const signer = new ethers.Wallet(PRIVATE_KEY1, provider);\n      const contractABI = require('./abis/Temp.json');\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\n      const transaction = await contract.setUserData(fileCid, recipientAddress);\n      await transaction.wait();\n      console.log('Transaction successful');\n    } catch (error) {\n      console.error('Error sending to contract:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: fileInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUploadToIPFS,\n      children: \"Upload to IPFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Recipient Address\",\n      onChange: e => setRecipientAddress(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendToContract,\n      children: \"Send to Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadFileComponent, \"mOdEnQNS8oBbMUSa+tKSShr4NQs=\");\n_c = UploadFileComponent;\nexport default UploadFileComponent;\nvar _c;\n$RefreshReg$(_c, \"UploadFileComponent\");","map":{"version":3,"names":["React","useRef","useState","ethers","create","jsxDEV","_jsxDEV","client","host","port","protocol","UploadFileComponent","_s","fileInput","fileCid","setFileCid","recipientAddress","setRecipientAddress","CONTRACT_ADDRESS","API_KEY","PRIVATE_KEYA","PRIVATE_KEY1","handleUploadToIPFS","file","current","files","console","log","reader","FileReader","onloadend","cid","add","result","toString","readAsArrayBuffer","error","handleSendToContract","network","provider","providers","AlchemyProvider","signer","Wallet","contractABI","require","contract","Contract","transaction","setUserData","wait","children","type","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","onChange","e","target","value","_c","$RefreshReg$"],"sources":["C:/thesis_project_start/Ethereum-DappV2/src/uploadFile.jsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { create } from 'ipfs-http-client';\r\n\r\nconst client = create({\r\n  host: '127.0.0.1',\r\n  port: 5001,\r\n  protocol: 'http',\r\n});\r\n\r\nfunction UploadFileComponent() {\r\n  const fileInput = useRef(null);\r\n  const [fileCid, setFileCid] = useState(null);\r\n  //const [userAddress, setUserAddress] = useState('');\r\n  const [recipientAddress, setRecipientAddress] = useState('');\r\n\r\n  const CONTRACT_ADDRESS = \"0x56543E1324a0E83Dfa6FF44F45a1593aFFb6Cd0f\";  \r\n  const API_KEY = \"rdO0i4o--THH81mB5V3Cb9SE1UiwCtrh\";\r\n  const PRIVATE_KEYA = \"ffce87da659a88c5ad63d447fff3be4308b00845bf002861ba91ad0ce5994603\";\r\n  const PRIVATE_KEY1=\"36ac196f099cc8a7d05ef87545c835220f0607a05baf8d48a712a8afbfbddef3\";\r\n\r\n  async function handleUploadToIPFS() {\r\n    const file = fileInput.current.files[0];\r\n    if (!file) {\r\n      console.log('No file selected');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const reader = new FileReader();\r\n      reader.onloadend = async () => {\r\n        const { cid } = await client.add(reader.result);\r\n        console.log(cid);\r\n        setFileCid(cid.toString());\r\n      };\r\n      reader.readAsArrayBuffer(file);\r\n      \r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n    }\r\n  }\r\n\r\n  const handleSendToContract = async () => {\r\n    try {\r\n      const network = 'maticmum';\r\n      const provider = new ethers.providers.AlchemyProvider(network, API_KEY);\r\n      const signer = new ethers.Wallet(PRIVATE_KEY1, provider);\r\n  \r\n      const contractABI = require('./abis/Temp.json');\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\r\n  \r\n      const transaction = await contract.setUserData(fileCid,recipientAddress);\r\n     \r\n    \r\n      await transaction.wait();\r\n      console.log('Transaction successful');\r\n    } catch (error) {\r\n      console.error('Error sending to contract:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" ref={fileInput} />\r\n      <button onClick={handleUploadToIPFS}>Upload to IPFS</button>\r\n     \r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Recipient Address\"\r\n        onChange={(e) => setRecipientAddress(e.target.value)}\r\n      />\r\n      <button onClick={handleSendToContract}>Send to Contract</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UploadFileComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,MAAM,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,MAAM,GAAGH,MAAM,CAAC;EACpBI,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,IAAI;EACVC,QAAQ,EAAE;AACZ,CAAC,CAAC;AAEF,SAASC,mBAAmBA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAMC,SAAS,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C;EACA,MAAM,CAACc,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE5D,MAAMgB,gBAAgB,GAAG,4CAA4C;EACrE,MAAMC,OAAO,GAAG,kCAAkC;EAClD,MAAMC,YAAY,GAAG,kEAAkE;EACvF,MAAMC,YAAY,GAAC,kEAAkE;EAErF,eAAeC,kBAAkBA,CAAA,EAAG;IAClC,MAAMC,IAAI,GAAGV,SAAS,CAACW,OAAO,CAACC,KAAK,CAAC,CAAC,CAAC;IACvC,IAAI,CAACF,IAAI,EAAE;MACTG,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/B;IACF;IAEA,IAAI;MACF,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,SAAS,GAAG,YAAY;QAC7B,MAAM;UAAEC;QAAI,CAAC,GAAG,MAAMxB,MAAM,CAACyB,GAAG,CAACJ,MAAM,CAACK,MAAM,CAAC;QAC/CP,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;QAChBhB,UAAU,CAACgB,GAAG,CAACG,QAAQ,CAAC,CAAC,CAAC;MAC5B,CAAC;MACDN,MAAM,CAACO,iBAAiB,CAACZ,IAAI,CAAC;IAEhC,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF;EAEA,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI;MACF,MAAMC,OAAO,GAAG,UAAU;MAC1B,MAAMC,QAAQ,GAAG,IAAIpC,MAAM,CAACqC,SAAS,CAACC,eAAe,CAACH,OAAO,EAAEnB,OAAO,CAAC;MACvE,MAAMuB,MAAM,GAAG,IAAIvC,MAAM,CAACwC,MAAM,CAACtB,YAAY,EAAEkB,QAAQ,CAAC;MAExD,MAAMK,WAAW,GAAGC,OAAO,CAAC,kBAAkB,CAAC;MAC/C,MAAMC,QAAQ,GAAG,IAAI3C,MAAM,CAAC4C,QAAQ,CAAC7B,gBAAgB,EAAE0B,WAAW,EAAEF,MAAM,CAAC;MAE3E,MAAMM,WAAW,GAAG,MAAMF,QAAQ,CAACG,WAAW,CAACnC,OAAO,EAACE,gBAAgB,CAAC;MAGxE,MAAMgC,WAAW,CAACE,IAAI,CAAC,CAAC;MACxBxB,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACvC,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAED,oBACE9B,OAAA;IAAA6C,QAAA,gBACE7C,OAAA;MAAO8C,IAAI,EAAC,MAAM;MAACC,GAAG,EAAExC;IAAU;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrCnD,OAAA;MAAQoD,OAAO,EAAEpC,kBAAmB;MAAA6B,QAAA,EAAC;IAAc;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAE5DnD,OAAA;MACE8C,IAAI,EAAC,MAAM;MACXO,WAAW,EAAC,mBAAmB;MAC/BC,QAAQ,EAAGC,CAAC,IAAK5C,mBAAmB,CAAC4C,CAAC,CAACC,MAAM,CAACC,KAAK;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC,eACFnD,OAAA;MAAQoD,OAAO,EAAErB,oBAAqB;MAAAc,QAAA,EAAC;IAAgB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEV;AAAC7C,EAAA,CAhEQD,mBAAmB;AAAAqD,EAAA,GAAnBrD,mBAAmB;AAkE5B,eAAeA,mBAAmB;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}