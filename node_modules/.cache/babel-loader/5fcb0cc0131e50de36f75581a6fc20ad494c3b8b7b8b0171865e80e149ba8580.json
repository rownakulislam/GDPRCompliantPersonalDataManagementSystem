{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nimport { CodeError } from '@libp2p/interface';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { CID } from 'multiformats/cid';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { bytesToMultiaddrParts, stringToMultiaddrParts, tuplesToBytes } from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport { isMultiaddr, resolvers } from './index.js';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nexport const symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\nconst DNS_CODES = [getProtocol('dns').code, getProtocol('dns4').code, getProtocol('dns6').code, getProtocol('dnsaddr').code];\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nexport class Multiaddr {\n  bytes;\n  #string;\n  #tuples;\n  #stringTuples;\n  #path;\n  [symbol] = true;\n  constructor(addr) {\n    // default\n    if (addr == null) {\n      addr = '';\n    }\n    let parts;\n    if (addr instanceof Uint8Array) {\n      parts = bytesToMultiaddrParts(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n      }\n      parts = stringToMultiaddrParts(addr);\n    } else if (isMultiaddr(addr)) {\n      // Multiaddr\n      parts = bytesToMultiaddrParts(addr.bytes);\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n    this.bytes = parts.bytes;\n    this.#string = parts.string;\n    this.#tuples = parts.tuples;\n    this.#stringTuples = parts.stringTuples;\n    this.#path = parts.path;\n  }\n  toString() {\n    return this.#string;\n  }\n  toJSON() {\n    return this.toString();\n  }\n  toOptions() {\n    let family;\n    let transport;\n    let host;\n    let port;\n    let zone = '';\n    const tcp = getProtocol('tcp');\n    const udp = getProtocol('udp');\n    const ip4 = getProtocol('ip4');\n    const ip6 = getProtocol('ip6');\n    const dns6 = getProtocol('dns6');\n    const ip6zone = getProtocol('ip6zone');\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`;\n      }\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name;\n        port = 443;\n        host = `${value ?? ''}${zone}`;\n        family = code === dns6.code ? 6 : 4;\n      }\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name;\n        port = parseInt(value ?? '');\n      }\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name;\n        host = `${value ?? ''}${zone}`;\n        family = code === ip6.code ? 6 : 4;\n      }\n    }\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n    }\n    const opts = {\n      family,\n      host,\n      transport,\n      port\n    };\n    return opts;\n  }\n  protos() {\n    return this.#tuples.map(([code]) => Object.assign({}, getProtocol(code)));\n  }\n  protoCodes() {\n    return this.#tuples.map(([code]) => code);\n  }\n  protoNames() {\n    return this.#tuples.map(([code]) => getProtocol(code).name);\n  }\n  tuples() {\n    return this.#tuples;\n  }\n  stringTuples() {\n    return this.#stringTuples;\n  }\n  encapsulate(addr) {\n    addr = new Multiaddr(addr);\n    return new Multiaddr(this.toString() + addr.toString());\n  }\n  decapsulate(addr) {\n    const addrString = addr.toString();\n    const s = this.toString();\n    const i = s.lastIndexOf(addrString);\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n    }\n    return new Multiaddr(s.slice(0, i));\n  }\n  decapsulateCode(code) {\n    const tuples = this.tuples();\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(tuplesToBytes(tuples.slice(0, i)));\n      }\n    }\n    return this;\n  }\n  getPeerId() {\n    try {\n      let tuples = [];\n      this.stringTuples().forEach(([code, name]) => {\n        if (code === names.p2p.code) {\n          tuples.push([code, name]);\n        }\n        // if this is a p2p-circuit address, return the target peer id if present\n        // not the peer id of the relay\n        if (code === names['p2p-circuit'].code) {\n          tuples = [];\n        }\n      });\n      // Get the last ipfs tuple ['p2p', 'peerid string']\n      const tuple = tuples.pop();\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1];\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n        }\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n  getPath() {\n    return this.#path;\n  }\n  equals(addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes);\n  }\n  async resolve(options) {\n    const resolvableProto = this.protos().find(p => p.resolvable);\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this];\n    }\n    const resolver = resolvers.get(resolvableProto.name);\n    if (resolver == null) {\n      throw new CodeError(`no available resolver for ${resolvableProto.name}`, 'ERR_NO_AVAILABLE_RESOLVER');\n    }\n    const addresses = await resolver(this, options);\n    return addresses.map(a => new Multiaddr(a));\n  }\n  nodeAddress() {\n    const options = this.toOptions();\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n    }\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    };\n  }\n  isThinWaistAddress(addr) {\n    const protos = (addr ?? this).protos();\n    if (protos.length !== 2) {\n      return false;\n    }\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false;\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n  [inspect]() {\n    return `Multiaddr(${this.#string})`;\n  }\n}","map":{"version":3,"names":["CodeError","base58btc","CID","equals","uint8ArrayEquals","toString","uint8ArrayToString","bytesToMultiaddrParts","stringToMultiaddrParts","tuplesToBytes","getProtocol","names","isMultiaddr","resolvers","inspect","Symbol","for","symbol","DNS_CODES","code","Multiaddr","bytes","string","tuples","stringTuples","path","constructor","addr","parts","Uint8Array","length","charAt","Error","toJSON","toOptions","family","transport","host","port","zone","tcp","udp","ip4","ip6","dns6","ip6zone","value","includes","name","parseInt","opts","protos","map","Object","assign","protoCodes","protoNames","encapsulate","decapsulate","addrString","s","i","lastIndexOf","slice","decapsulateCode","getPeerId","forEach","p2p","push","tuple","pop","peerIdStr","decode","parse","multihash","e","getPath","resolve","options","resolvableProto","find","p","resolvable","resolver","get","addresses","a","nodeAddress","address","isThinWaistAddress"],"sources":["C:\\shibu2\\Ethereum-DappV2\\node_modules\\@multiformats\\multiaddr-to-uri\\node_modules\\@multiformats\\multiaddr\\src\\multiaddr.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\n\nimport { CodeError } from '@libp2p/interface'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { CID } from 'multiformats/cid'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { bytesToMultiaddrParts, stringToMultiaddrParts, type MultiaddrParts, tuplesToBytes } from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport { isMultiaddr, type AbortOptions, type MultiaddrInput, type Multiaddr as MultiaddrInterface, type MultiaddrObject, type Protocol, type StringTuple, type Tuple, resolvers, type NodeAddress } from './index.js'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\nexport const symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nexport class Multiaddr implements MultiaddrInterface {\n  public bytes: Uint8Array\n  #string: string\n  #tuples: Tuple[]\n  #stringTuples: StringTuple[]\n  #path: string | null\n\n  [symbol]: boolean = true\n\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    let parts: MultiaddrParts\n    if (addr instanceof Uint8Array) {\n      parts = bytesToMultiaddrParts(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      parts = stringToMultiaddrParts(addr)\n    } else if (isMultiaddr(addr)) { // Multiaddr\n      parts = bytesToMultiaddrParts(addr.bytes)\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n\n    this.bytes = parts.bytes\n    this.#string = parts.string\n    this.#tuples = parts.tuples\n    this.#stringTuples = parts.stringTuples\n    this.#path = parts.path\n  }\n\n  toString (): string {\n    return this.#string\n  }\n\n  toJSON (): string {\n    return this.toString()\n  }\n\n  toOptions (): MultiaddrObject {\n    let family: 4 | 6 | undefined\n    let transport: string | undefined\n    let host: string | undefined\n    let port: number | undefined\n    let zone = ''\n\n    const tcp = getProtocol('tcp')\n    const udp = getProtocol('udp')\n    const ip4 = getProtocol('ip4')\n    const ip6 = getProtocol('ip6')\n    const dns6 = getProtocol('dns6')\n    const ip6zone = getProtocol('ip6zone')\n\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`\n      }\n\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name\n        port = 443\n        host = `${value ?? ''}${zone}`\n        family = code === dns6.code ? 6 : 4\n      }\n\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name\n        port = parseInt(value ?? '')\n      }\n\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name\n        host = `${value ?? ''}${zone}`\n        family = code === ip6.code ? 6 : 4\n      }\n    }\n\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family,\n      host,\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  protos (): Protocol[] {\n    return this.#tuples.map(([code]) => Object.assign({}, getProtocol(code)))\n  }\n\n  protoCodes (): number[] {\n    return this.#tuples.map(([code]) => code)\n  }\n\n  protoNames (): string[] {\n    return this.#tuples.map(([code]) => getProtocol(code).name)\n  }\n\n  tuples (): Array<[number, Uint8Array?]> {\n    return this.#tuples\n  }\n\n  stringTuples (): Array<[number, string?]> {\n    return this.#stringTuples\n  }\n\n  encapsulate (addr: MultiaddrInput): Multiaddr {\n    addr = new Multiaddr(addr)\n    return new Multiaddr(this.toString() + addr.toString())\n  }\n\n  decapsulate (addr: Multiaddr | string): Multiaddr {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n    return new Multiaddr(s.slice(0, i))\n  }\n\n  decapsulateCode (code: number): Multiaddr {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  getPeerId (): string | null {\n    try {\n      let tuples: Array<[number, string | undefined]> = []\n\n      this.stringTuples().forEach(([code, name]) => {\n        if (code === names.p2p.code) {\n          tuples.push([code, name])\n        }\n\n        // if this is a p2p-circuit address, return the target peer id if present\n        // not the peer id of the relay\n        if (code === names['p2p-circuit'].code) {\n          tuples = []\n        }\n      })\n\n      // Get the last ipfs tuple ['p2p', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  getPath (): string | null {\n    return this.#path\n  }\n\n  equals (addr: { bytes: Uint8Array }): boolean {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  async resolve (options?: AbortOptions): Promise<Multiaddr[]> {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw new CodeError(`no available resolver for ${resolvableProto.name}`, 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this, options)\n    return addresses.map((a) => new Multiaddr(a))\n  }\n\n  nodeAddress (): NodeAddress {\n    const options = this.toOptions()\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`)\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    }\n  }\n\n  isThinWaistAddress (addr?: Multiaddr): boolean {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n  [inspect] (): string {\n    return `Multiaddr(${this.#string})`\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}