{"ast":null,"code":"/**\n * An implementation of a typed event target\n * etc\n */\nexport class TypedEventEmitter extends EventTarget {\n  #listeners = new Map();\n  listenerCount(type) {\n    const listeners = this.#listeners.get(type);\n    if (listeners == null) {\n      return 0;\n    }\n    return listeners.length;\n  }\n  addEventListener(type, listener, options) {\n    super.addEventListener(type, listener, options);\n    let list = this.#listeners.get(type);\n    if (list == null) {\n      list = [];\n      this.#listeners.set(type, list);\n    }\n    list.push({\n      callback: listener,\n      once: (options !== true && options !== false && options?.once) ?? false\n    });\n  }\n  removeEventListener(type, listener, options) {\n    super.removeEventListener(type.toString(), listener ?? null, options);\n    let list = this.#listeners.get(type);\n    if (list == null) {\n      return;\n    }\n    list = list.filter(({\n      callback\n    }) => callback !== listener);\n    this.#listeners.set(type, list);\n  }\n  dispatchEvent(event) {\n    const result = super.dispatchEvent(event);\n    let list = this.#listeners.get(event.type);\n    if (list == null) {\n      return result;\n    }\n    list = list.filter(({\n      once\n    }) => !once);\n    this.#listeners.set(event.type, list);\n    return result;\n  }\n  safeDispatchEvent(type, detail) {\n    return this.dispatchEvent(new CustomEvent(type, detail));\n  }\n}\n/**\n * CustomEvent is a standard event but it's not supported by node.\n *\n * Remove this when https://github.com/nodejs/node/issues/40678 is closed.\n *\n * Ref: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n */\nclass CustomEventPolyfill extends Event {\n  /** Returns any custom data event was created with. Typically used for synthetic events. */\n  detail;\n  constructor(message, data) {\n    super(message, data);\n    // @ts-expect-error could be undefined\n    this.detail = data?.detail;\n  }\n}\nexport const CustomEvent = globalThis.CustomEvent ?? CustomEventPolyfill;","map":{"version":3,"names":["TypedEventEmitter","EventTarget","listeners","Map","listenerCount","type","get","length","addEventListener","listener","options","list","set","push","callback","once","removeEventListener","toString","filter","dispatchEvent","event","result","safeDispatchEvent","detail","CustomEvent","CustomEventPolyfill","Event","constructor","message","data","globalThis"],"sources":["C:\\thesis_project_start\\Ethereum-DappV2\\node_modules\\@libp2p\\interface\\src\\event-target.ts"],"sourcesContent":["export interface EventCallback<EventType> { (evt: EventType): void }\nexport interface EventObject<EventType> { handleEvent: EventCallback<EventType> }\nexport type EventHandler<EventType> = EventCallback<EventType> | EventObject<EventType>\n\ninterface Listener {\n  once: boolean\n  callback: any\n}\n\n/**\n * Adds types to the EventTarget class. Hopefully this won't be necessary forever.\n *\n * https://github.com/microsoft/TypeScript/issues/28357\n * https://github.com/microsoft/TypeScript/issues/43477\n * https://github.com/microsoft/TypeScript/issues/299\n * etc\n */\nexport interface TypedEventTarget <EventMap extends Record<string, any>> extends EventTarget {\n  addEventListener<K extends keyof EventMap>(type: K, listener: EventHandler<EventMap[K]> | null, options?: boolean | AddEventListenerOptions): void\n\n  listenerCount (type: string): number\n\n  removeEventListener<K extends keyof EventMap>(type: K, listener?: EventHandler<EventMap[K]> | null, options?: boolean | EventListenerOptions): void\n\n  removeEventListener (type: string, listener?: EventHandler<Event>, options?: boolean | EventListenerOptions): void\n\n  safeDispatchEvent<Detail>(type: keyof EventMap, detail: CustomEventInit<Detail>): boolean\n}\n\n/**\n * An implementation of a typed event target\n * etc\n */\nexport class TypedEventEmitter<EventMap extends Record<string, any>> extends EventTarget implements TypedEventTarget<EventMap> {\n  #listeners = new Map<any, Listener[]>()\n\n  listenerCount (type: string): number {\n    const listeners = this.#listeners.get(type)\n\n    if (listeners == null) {\n      return 0\n    }\n\n    return listeners.length\n  }\n\n  addEventListener<K extends keyof EventMap>(type: K, listener: EventHandler<EventMap[K]> | null, options?: boolean | AddEventListenerOptions): void\n  addEventListener (type: string, listener: EventHandler<Event>, options?: boolean | AddEventListenerOptions): void {\n    super.addEventListener(type, listener, options)\n\n    let list = this.#listeners.get(type)\n\n    if (list == null) {\n      list = []\n      this.#listeners.set(type, list)\n    }\n\n    list.push({\n      callback: listener,\n      once: (options !== true && options !== false && options?.once) ?? false\n    })\n  }\n\n  removeEventListener<K extends keyof EventMap>(type: K, listener?: EventHandler<EventMap[K]> | null, options?: boolean | EventListenerOptions): void\n  removeEventListener (type: string, listener?: EventHandler<Event>, options?: boolean | EventListenerOptions): void {\n    super.removeEventListener(type.toString(), listener ?? null, options)\n\n    let list = this.#listeners.get(type)\n\n    if (list == null) {\n      return\n    }\n\n    list = list.filter(({ callback }) => callback !== listener)\n    this.#listeners.set(type, list)\n  }\n\n  dispatchEvent (event: Event): boolean {\n    const result = super.dispatchEvent(event)\n\n    let list = this.#listeners.get(event.type)\n\n    if (list == null) {\n      return result\n    }\n\n    list = list.filter(({ once }) => !once)\n    this.#listeners.set(event.type, list)\n\n    return result\n  }\n\n  safeDispatchEvent<Detail>(type: keyof EventMap, detail: CustomEventInit<Detail>): boolean {\n    return this.dispatchEvent(new CustomEvent<Detail>(type as string, detail))\n  }\n}\n\n/**\n * CustomEvent is a standard event but it's not supported by node.\n *\n * Remove this when https://github.com/nodejs/node/issues/40678 is closed.\n *\n * Ref: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n */\nclass CustomEventPolyfill<T = any> extends Event {\n  /** Returns any custom data event was created with. Typically used for synthetic events. */\n  public detail: T\n\n  constructor (message: string, data?: EventInit & { detail: T }) {\n    super(message, data)\n    // @ts-expect-error could be undefined\n    this.detail = data?.detail\n  }\n}\n\nexport const CustomEvent = globalThis.CustomEvent ?? CustomEventPolyfill\n"],"mappings":"AA6BA;;;;AAIA,OAAM,MAAOA,iBAAwD,SAAQC,WAAW;EACtF,CAAAC,SAAU,GAAG,IAAIC,GAAG,EAAmB;EAEvCC,aAAaA,CAAEC,IAAY;IACzB,MAAMH,SAAS,GAAG,IAAI,CAAC,CAAAA,SAAU,CAACI,GAAG,CAACD,IAAI,CAAC;IAE3C,IAAIH,SAAS,IAAI,IAAI,EAAE;MACrB,OAAO,CAAC;IACV;IAEA,OAAOA,SAAS,CAACK,MAAM;EACzB;EAGAC,gBAAgBA,CAAEH,IAAY,EAAEI,QAA6B,EAAEC,OAA2C;IACxG,KAAK,CAACF,gBAAgB,CAACH,IAAI,EAAEI,QAAQ,EAAEC,OAAO,CAAC;IAE/C,IAAIC,IAAI,GAAG,IAAI,CAAC,CAAAT,SAAU,CAACI,GAAG,CAACD,IAAI,CAAC;IAEpC,IAAIM,IAAI,IAAI,IAAI,EAAE;MAChBA,IAAI,GAAG,EAAE;MACT,IAAI,CAAC,CAAAT,SAAU,CAACU,GAAG,CAACP,IAAI,EAAEM,IAAI,CAAC;IACjC;IAEAA,IAAI,CAACE,IAAI,CAAC;MACRC,QAAQ,EAAEL,QAAQ;MAClBM,IAAI,EAAE,CAACL,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,IAAIA,OAAO,EAAEK,IAAI,KAAK;KACnE,CAAC;EACJ;EAGAC,mBAAmBA,CAAEX,IAAY,EAAEI,QAA8B,EAAEC,OAAwC;IACzG,KAAK,CAACM,mBAAmB,CAACX,IAAI,CAACY,QAAQ,EAAE,EAAER,QAAQ,IAAI,IAAI,EAAEC,OAAO,CAAC;IAErE,IAAIC,IAAI,GAAG,IAAI,CAAC,CAAAT,SAAU,CAACI,GAAG,CAACD,IAAI,CAAC;IAEpC,IAAIM,IAAI,IAAI,IAAI,EAAE;MAChB;IACF;IAEAA,IAAI,GAAGA,IAAI,CAACO,MAAM,CAAC,CAAC;MAAEJ;IAAQ,CAAE,KAAKA,QAAQ,KAAKL,QAAQ,CAAC;IAC3D,IAAI,CAAC,CAAAP,SAAU,CAACU,GAAG,CAACP,IAAI,EAAEM,IAAI,CAAC;EACjC;EAEAQ,aAAaA,CAAEC,KAAY;IACzB,MAAMC,MAAM,GAAG,KAAK,CAACF,aAAa,CAACC,KAAK,CAAC;IAEzC,IAAIT,IAAI,GAAG,IAAI,CAAC,CAAAT,SAAU,CAACI,GAAG,CAACc,KAAK,CAACf,IAAI,CAAC;IAE1C,IAAIM,IAAI,IAAI,IAAI,EAAE;MAChB,OAAOU,MAAM;IACf;IAEAV,IAAI,GAAGA,IAAI,CAACO,MAAM,CAAC,CAAC;MAAEH;IAAI,CAAE,KAAK,CAACA,IAAI,CAAC;IACvC,IAAI,CAAC,CAAAb,SAAU,CAACU,GAAG,CAACQ,KAAK,CAACf,IAAI,EAAEM,IAAI,CAAC;IAErC,OAAOU,MAAM;EACf;EAEAC,iBAAiBA,CAASjB,IAAoB,EAAEkB,MAA+B;IAC7E,OAAO,IAAI,CAACJ,aAAa,CAAC,IAAIK,WAAW,CAASnB,IAAc,EAAEkB,MAAM,CAAC,CAAC;EAC5E;;AAGF;;;;;;;AAOA,MAAME,mBAA6B,SAAQC,KAAK;EAC9C;EACOH,MAAM;EAEbI,YAAaC,OAAe,EAAEC,IAAgC;IAC5D,KAAK,CAACD,OAAO,EAAEC,IAAI,CAAC;IACpB;IACA,IAAI,CAACN,MAAM,GAAGM,IAAI,EAAEN,MAAM;EAC5B;;AAGF,OAAO,MAAMC,WAAW,GAAGM,UAAU,CAACN,WAAW,IAAIC,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}