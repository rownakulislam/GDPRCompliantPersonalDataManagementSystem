{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\thesis_project_start\\Ethereum-DappV2\\node_modules\\@libp2p\\interface\\src\\stream-muxer\\index.ts"],"sourcesContent":["import type { Direction, Stream } from '../connection/index.js'\nimport type { AbortOptions } from '../index.js'\nimport type { Duplex } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface StreamMuxerFactory {\n  /**\n   * The protocol used to select this muxer during connection opening\n   */\n  protocol: string\n\n  /**\n   * Creates a new stream muxer to be used with a new connection\n   */\n  createStreamMuxer(init?: StreamMuxerInit): StreamMuxer\n}\n\n/**\n * A libp2p stream muxer\n */\nexport interface StreamMuxer extends Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>> {\n  /**\n   * The protocol used to select this muxer during connection opening\n   */\n  protocol: string\n\n  /**\n   * A list of streams that are currently open. Closed streams will not be returned.\n   */\n  readonly streams: Stream[]\n  /**\n   * Initiate a new stream with the given name. If no name is\n   * provided, the id of the stream will be used.\n   */\n  newStream(name?: string): Stream | Promise<Stream>\n\n  /**\n   * Close or abort all tracked streams and stop the muxer\n   */\n  close(options?: AbortOptions): Promise<void>\n\n  /**\n   * Close or abort all tracked streams and stop the muxer\n   */\n  abort(err: Error): void\n}\n\nexport interface StreamMuxerInit {\n  /**\n   * A callback function invoked every time an incoming stream is opened\n   */\n  onIncomingStream?(stream: Stream): void\n\n  /**\n   * A callback function invoke every time a stream ends\n   */\n  onStreamEnd?(stream: Stream): void\n\n  /**\n   * Outbound stream muxers are opened by the local node, inbound stream muxers are opened by the remote\n   */\n  direction?: Direction\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}