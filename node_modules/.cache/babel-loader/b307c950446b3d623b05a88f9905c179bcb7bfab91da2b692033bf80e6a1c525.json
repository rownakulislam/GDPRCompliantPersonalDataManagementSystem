{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\shibu2\\Ethereum-DappV2\\node_modules\\@libp2p\\interface\\src\\connection-encrypter\\index.ts"],"sourcesContent":["import type { MultiaddrConnection } from '../connection/index.js'\nimport type { PeerId } from '../peer-id/index.js'\nimport type { Duplex } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\n/**\n * A libp2p connection encrypter module must be compliant to this interface\n * to ensure all exchanged data between two peers is encrypted.\n */\nexport interface ConnectionEncrypter<Extension = unknown> {\n  protocol: string\n\n  /**\n   * Encrypt outgoing data to the remote party. If the remote PeerId is known,\n   * pass it for extra verification, otherwise it will be determined during\n   * the handshake.\n   */\n  secureOutbound <Stream extends Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>> = MultiaddrConnection> (localPeer: PeerId, connection: Stream, remotePeer?: PeerId): Promise<SecuredConnection<Stream, Extension>>\n\n  /**\n   * Decrypt incoming data. If the remote PeerId is known,\n   * pass it for extra verification, otherwise it will be determined during\n   * the handshake\n   */\n  secureInbound <Stream extends Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>> = MultiaddrConnection> (localPeer: PeerId, connection: Stream, remotePeer?: PeerId): Promise<SecuredConnection<Stream, Extension>>\n}\n\nexport interface SecuredConnection<Stream = any, Extension = unknown> {\n  conn: Stream\n  remoteExtensions?: Extension\n  remotePeer: PeerId\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}