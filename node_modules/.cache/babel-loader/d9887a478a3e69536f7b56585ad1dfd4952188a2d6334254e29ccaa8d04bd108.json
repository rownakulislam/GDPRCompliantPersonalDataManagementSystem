{"ast":null,"code":"var _jsxFileName = \"C:\\\\shibu2\\\\Ethereum-DappV2\\\\src\\\\View.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ethers } from 'ethers';\nimport './css/View.css';\nimport { create } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = create({\n  host: '127.0.0.1',\n  port: 5001,\n  protocol: 'http'\n});\nfunction ViewCertificateComponent({}) {\n  _s();\n  const [showDetails, setShowDetails] = useState(false);\n  const [studentAddress, setStudentAddress] = useState('');\n  const [certificateDetails, setCertificateDetails] = useState({});\n  const [fileUrl, setFileUrl] = useState(null);\n  const [fileCid, setFileCid] = useState(null);\n  const CONTRACT_ADDRESS = '0x70b120F55377406Ea97873E9f9b2B12D94598c8b';\n  const API_KEY = 'rdO0i4o--THH81mB5V3Cb9SE1UiwCtrh';\n  const PRIVATE_KEY = 'ffce87da659a88c5ad63d447fff3be4308b00845bf002861ba91ad0ce5994603';\n  const [viewIPFSimage, setViewIPFSimage] = useState(false);\n  const network = 'maticmum';\n  const provider = new ethers.providers.AlchemyProvider(network, API_KEY);\n  const signer = new ethers.Wallet(PRIVATE_KEY, provider);\n  const contractABI = require('./abis/CertificateNFT.json');\n  const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\n  async function fetchFileFromIPFS() {\n    try {\n      const certificate = await contract.viewCertificate(studentAddress);\n      setViewIPFSimage(true);\n      const stream = client.cat(certificate.fileCID);\n      let data = [];\n      for await (const chunk of stream) {\n        data.push(chunk);\n      }\n      // Create a Blob from the data\n      const blob = new Blob(data, {\n        type: 'image/jpeg'\n      });\n      // Create a URL from the Blob\n      const url = URL.createObjectURL(blob);\n      setFileUrl(url);\n    } catch (error) {\n      console.error('Error fetching file from IPFS:', error);\n    }\n  }\n  const viewCertificate = async () => {\n    try {\n      const network = 'maticmum';\n      const provider = new ethers.providers.AlchemyProvider(network, API_KEY);\n      const signer = new ethers.Wallet(PRIVATE_KEY, provider);\n      const contractABI = require('./abis/CertificateNFT.json');\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\n      const certificate = await contract.viewCertificate(studentAddress);\n      setFileCid(certificate.fileCid);\n      setCertificateDetails({\n        name: certificate.name,\n        degreeName: certificate.degreeName,\n        subject: certificate.subject,\n        issueTimestamp: new Date(certificate.timestamp * 1000)\n      });\n      setShowDetails(true);\n    } catch (error) {\n      setCertificateDetails({\n        error: 'Failed to view certificate' + '-->' + error\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-container\",\n    children: [!showDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"View Certificate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          marginBottom: '10px'\n        },\n        type: \"text\",\n        placeholder: \"Student Address\",\n        onChange: e => setStudentAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: viewCertificate,\n        style: {\n          backgroundColor: '#4caf50',\n          color: 'white',\n          padding: '10px 15px',\n          border: 'none',\n          borderRadius: '5px',\n          marginBottom: '10px',\n          cursor: 'pointer'\n        },\n        children: \"View Certificate Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), showDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Certificate Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", certificateDetails.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Degree Name: \", certificateDetails.degreeName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Subject: \", certificateDetails.subject]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Issue Timestamp: \", certificateDetails.issueTimestamp.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), certificateDetails.error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", certificateDetails.error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => fetchFileFromIPFS(),\n      style: {\n        marginBottom: 10,\n        width: 150\n      },\n      children: \"View Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), \"  \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 108\n    }, this), viewIPFSimage === true && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"image\",\n        alt: \"From IPFS\",\n        src: fileUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(ViewCertificateComponent, \"sRW/7P3Li0+xa5pq0cmVhtT3yMg=\");\n_c = ViewCertificateComponent;\nexport default ViewCertificateComponent;\nvar _c;\n$RefreshReg$(_c, \"ViewCertificateComponent\");","map":{"version":3,"names":["React","useState","ethers","create","jsxDEV","_jsxDEV","client","host","port","protocol","ViewCertificateComponent","_s","showDetails","setShowDetails","studentAddress","setStudentAddress","certificateDetails","setCertificateDetails","fileUrl","setFileUrl","fileCid","setFileCid","CONTRACT_ADDRESS","API_KEY","PRIVATE_KEY","viewIPFSimage","setViewIPFSimage","network","provider","providers","AlchemyProvider","signer","Wallet","contractABI","require","contract","Contract","fetchFileFromIPFS","certificate","viewCertificate","stream","cat","fileCID","data","chunk","push","blob","Blob","type","url","URL","createObjectURL","error","console","name","degreeName","subject","issueTimestamp","Date","timestamp","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","placeholder","onChange","e","target","value","onClick","backgroundColor","color","padding","border","borderRadius","cursor","toString","width","id","alt","src","_c","$RefreshReg$"],"sources":["C:/shibu2/Ethereum-DappV2/src/View.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport './css/View.css';\r\nimport { create } from 'ipfs-http-client';\r\nconst client = create({\r\n  host: '127.0.0.1',\r\n  port: 5001,\r\n  protocol: 'http',\r\n});\r\nfunction ViewCertificateComponent({  }) {\r\n  const [showDetails, setShowDetails] = useState(false);\r\n  const [studentAddress, setStudentAddress] = useState('');\r\n  const [certificateDetails, setCertificateDetails] = useState({});\r\n  const [fileUrl, setFileUrl] = useState(null);\r\n  const [fileCid, setFileCid] = useState(null);\r\n\r\n  const CONTRACT_ADDRESS = '0x70b120F55377406Ea97873E9f9b2B12D94598c8b';\r\n  const API_KEY = 'rdO0i4o--THH81mB5V3Cb9SE1UiwCtrh';\r\n  const PRIVATE_KEY = 'ffce87da659a88c5ad63d447fff3be4308b00845bf002861ba91ad0ce5994603';\r\n  const[viewIPFSimage, setViewIPFSimage]=useState(false);\r\n\r\n  const network = 'maticmum';\r\n  const provider = new ethers.providers.AlchemyProvider(network, API_KEY);\r\n  const signer = new ethers.Wallet(PRIVATE_KEY, provider);\r\n\r\n  const contractABI = require('./abis/CertificateNFT.json');\r\n  const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\r\n\r\n\r\n  async function fetchFileFromIPFS() {\r\n    try {\r\n      const certificate = await contract.viewCertificate(studentAddress);\r\n      setViewIPFSimage(true);\r\n      const stream = client.cat(certificate.fileCID);\r\n      let data = [];\r\n\r\n      for await (const chunk of stream) {\r\n        data.push(chunk);\r\n      }\r\n      // Create a Blob from the data\r\n      const blob = new Blob(data, { type: 'image/jpeg' });\r\n      // Create a URL from the Blob\r\n      const url = URL.createObjectURL(blob);\r\n      setFileUrl(url);\r\n    } catch (error) {\r\n      console.error('Error fetching file from IPFS:', error);\r\n    }\r\n  }\r\n\r\n  const viewCertificate = async () => {\r\n    try {\r\n      const network = 'maticmum';\r\n      const provider = new ethers.providers.AlchemyProvider(network, API_KEY);\r\n      const signer = new ethers.Wallet(PRIVATE_KEY, provider);\r\n\r\n      const contractABI = require('./abis/CertificateNFT.json');\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\r\n\r\n      const certificate = await contract.viewCertificate(studentAddress);\r\n      setFileCid(certificate.fileCid);\r\n      setCertificateDetails({\r\n        name: certificate.name,\r\n        degreeName: certificate.degreeName,\r\n        subject: certificate.subject,\r\n        issueTimestamp: new Date(certificate.timestamp * 1000),\r\n      });\r\n\r\n      setShowDetails(true);\r\n    } catch (error) {\r\n      setCertificateDetails({ error: 'Failed to view certificate' + '-->' + error });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"view-container\">\r\n      {!showDetails && (\r\n        <div>\r\n          <h1>View Certificate</h1>\r\n          <input\r\n            style={{ marginBottom: '10px' }}\r\n            type=\"text\"\r\n            placeholder=\"Student Address\"\r\n            onChange={(e) => setStudentAddress(e.target.value)}\r\n          />\r\n          <button\r\n            onClick={viewCertificate}\r\n            style={{\r\n              backgroundColor: '#4caf50',\r\n              color: 'white',\r\n              padding: '10px 15px',\r\n              border: 'none',\r\n              borderRadius: '5px',\r\n              marginBottom: '10px',\r\n              cursor: 'pointer',\r\n            }}\r\n          >\r\n            View Certificate Details\r\n          </button>\r\n        </div>\r\n      )}\r\n      {showDetails && (\r\n        <div>\r\n          <h4>Certificate Details</h4>\r\n          <p>Name: {certificateDetails.name}</p>\r\n          <p>Degree Name: {certificateDetails.degreeName}</p>\r\n          <p>Subject: {certificateDetails.subject}</p>\r\n          <p>Issue Timestamp: {certificateDetails.issueTimestamp.toString()}</p>\r\n\r\n        </div>\r\n      )}\r\n      {certificateDetails.error && <p>Error: {certificateDetails.error}</p>}\r\n\r\n      <button onClick={() => fetchFileFromIPFS()} style={{marginBottom:10,width:150}}>View Image</button>  <br />\r\n            {viewIPFSimage === true &&\r\n        <div>\r\n        <img id=\"image\" alt=\"From IPFS\" src={fileUrl}/>\r\n\r\n\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewCertificateComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}