{"ast":null,"code":"export const Ed25519 = 'Ed25519';\nexport const RSA = 'RSA';\nexport const secp256k1 = 'secp256k1';","map":{"version":3,"names":["Ed25519","RSA","secp256k1"],"sources":["C:\\thesis_project_start\\Ethereum-DappV2\\node_modules\\@libp2p\\interface\\src\\keys\\index.ts"],"sourcesContent":["import type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface PublicKey {\n  readonly bytes: Uint8Array\n  verify(data: Uint8Array | Uint8ArrayList, sig: Uint8Array): boolean | Promise<boolean>\n  marshal(): Uint8Array\n  equals(key: PublicKey): boolean\n  hash(): Uint8Array | Promise<Uint8Array>\n}\n\n/**\n * Generic private key interface\n */\nexport interface PrivateKey {\n  readonly public: PublicKey\n  readonly bytes: Uint8Array\n  sign(data: Uint8Array | Uint8ArrayList): Uint8Array | Promise<Uint8Array>\n  marshal(): Uint8Array\n  equals(key: PrivateKey): boolean\n  hash(): Uint8Array | Promise<Uint8Array>\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   */\n  id(): Promise<string>\n  /**\n   * Exports the password protected key in the format specified.\n   */\n  export(password: string, format?: 'pkcs-8' | string): Promise<string>\n}\n\nexport const Ed25519 = 'Ed25519'\nexport const RSA = 'RSA'\nexport const secp256k1 = 'secp256k1'\n\nexport type KeyType = typeof Ed25519 | typeof RSA | typeof secp256k1\n"],"mappings":"AAkCA,OAAO,MAAMA,OAAO,GAAG,SAAS;AAChC,OAAO,MAAMC,GAAG,GAAG,KAAK;AACxB,OAAO,MAAMC,SAAS,GAAG,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}