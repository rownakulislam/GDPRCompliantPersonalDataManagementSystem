{"ast":null,"code":"export const peerIdSymbol = Symbol.for('@libp2p/peer-id');\nexport function isPeerId(other) {\n  return other != null && Boolean(other[peerIdSymbol]);\n}","map":{"version":3,"names":["peerIdSymbol","Symbol","for","isPeerId","other","Boolean"],"sources":["C:\\thesis_project_start\\Ethereum-DappV2\\node_modules\\@libp2p\\interface\\src\\peer-id\\index.ts"],"sourcesContent":["import type { CID } from 'multiformats/cid'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\n\nexport type PeerIdType = 'RSA' | 'Ed25519' | 'secp256k1'\n\ninterface BasePeerId {\n  readonly type: PeerIdType\n  readonly multihash: MultihashDigest\n  readonly privateKey?: Uint8Array\n  readonly publicKey?: Uint8Array\n\n  toString(): string\n  toCID(): CID\n  toBytes(): Uint8Array\n  equals(other: PeerId | Uint8Array | string): boolean\n}\n\nexport interface RSAPeerId extends BasePeerId {\n  readonly type: 'RSA'\n  readonly publicKey?: Uint8Array\n}\n\nexport interface Ed25519PeerId extends BasePeerId {\n  readonly type: 'Ed25519'\n  readonly publicKey: Uint8Array\n}\n\nexport interface Secp256k1PeerId extends BasePeerId {\n  readonly type: 'secp256k1'\n  readonly publicKey: Uint8Array\n}\n\nexport type PeerId = RSAPeerId | Ed25519PeerId | Secp256k1PeerId\n\nexport const peerIdSymbol = Symbol.for('@libp2p/peer-id')\n\nexport function isPeerId (other: any): other is PeerId {\n  return other != null && Boolean(other[peerIdSymbol])\n}\n"],"mappings":"AAkCA,OAAO,MAAMA,YAAY,GAAGC,MAAM,CAACC,GAAG,CAAC,iBAAiB,CAAC;AAEzD,OAAM,SAAUC,QAAQA,CAAEC,KAAU;EAClC,OAAOA,KAAK,IAAI,IAAI,IAAIC,OAAO,CAACD,KAAK,CAACJ,YAAY,CAAC,CAAC;AACtD"},"metadata":{},"sourceType":"module","externalDependencies":[]}