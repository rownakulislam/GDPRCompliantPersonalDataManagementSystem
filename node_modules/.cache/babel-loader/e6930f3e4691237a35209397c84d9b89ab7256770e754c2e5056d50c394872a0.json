{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\thesis_project_start\\Ethereum-DappV2\\node_modules\\@libp2p\\interface\\src\\metrics\\index.ts"],"sourcesContent":["import type { MultiaddrConnection, Stream, Connection } from '../connection/index.js'\n\n/**\n * Create tracked metrics with these options. Loosely based on the\n * interfaces exposed by the prom-client module\n */\nexport interface MetricOptions {\n  /**\n   * Optional label for the metric\n   */\n  label?: string\n\n  /**\n   * Optional help for the metric\n   */\n  help?: string\n}\n\n/**\n * A function that returns a tracked metric which may be expensive\n * to calculate so it is only invoked when metrics are being scraped\n */\nexport type CalculateMetric<T = number> = (() => T) | (() => Promise<T>)\n\n/**\n * Create tracked metrics that are expensive to calculate by passing\n * a function that is only invoked when metrics are being scraped\n */\nexport interface CalculatedMetricOptions<T = number> extends MetricOptions {\n  /**\n   * An optional function invoked to calculate the component metric instead of\n   * using `.update`, `.increment`, and `.decrement`\n   */\n  calculate: CalculateMetric<T>\n}\n\n/**\n * Call this function to stop the timer returned from the `.timer` method\n * on the metric\n */\nexport interface StopTimer { (): void }\n\n/**\n * A tracked metric loosely based on the interfaces exposed by the\n * prom-client module\n */\nexport interface Metric {\n  /**\n   * Update the stored metric to the passed value\n   */\n  update(value: number): void\n\n  /**\n   * Increment the metric by the passed value or 1\n   */\n  increment(value?: number): void\n\n  /**\n   * Decrement the metric by the passed value or 1\n   */\n  decrement(value?: number): void\n\n  /**\n   * Reset this metric to its default value\n   */\n  reset(): void\n\n  /**\n   * Start a timed metric, call the returned function to\n   * stop the timer\n   */\n  timer(): StopTimer\n}\n\n/**\n * A group of related metrics loosely based on the interfaces exposed by the\n * prom-client module\n */\nexport interface MetricGroup {\n  /**\n   * Update the stored metric group to the passed value\n   */\n  update(values: Record<string, number>): void\n\n  /**\n   * Increment the metric group keys by the passed number or\n   * any non-numeric value to increment by 1\n   */\n  increment(values: Record<string, number | unknown>): void\n\n  /**\n   * Decrement the metric group keys by the passed number or\n   * any non-numeric value to decrement by 1\n   */\n  decrement(values: Record<string, number | unknown>): void\n\n  /**\n   * Reset the passed key in this metric group to its default value\n   * or all keys if no key is passed\n   */\n  reset(): void\n\n  /**\n   * Start a timed metric for the named key in the group, call\n   * the returned function to stop the timer\n   */\n  timer(key: string): StopTimer\n}\n\n/**\n * A tracked counter loosely based on the Counter interface exposed\n * by the prom-client module - counters are metrics that only go up\n */\nexport interface Counter {\n  /**\n   * Increment the metric by the passed value or 1\n   */\n  increment(value?: number): void\n\n  /**\n   * Reset this metric to its default value\n   */\n  reset(): void\n}\n\n/**\n * A group of tracked counters loosely based on the Counter interface\n * exposed by the prom-client module - counters are metrics that only\n * go up\n */\nexport interface CounterGroup {\n  /**\n   * Increment the metric group keys by the passed number or\n   * any non-numeric value to increment by 1\n   */\n  increment(values: Record<string, number | unknown>): void\n\n  /**\n   * Reset the passed key in this metric group to its default value\n   * or all keys if no key is passed\n   */\n  reset(): void\n}\n\n/**\n * The libp2p metrics tracking object. This interface is only concerned\n * with the collection of metrics, please see the individual implementations\n * for how to extract metrics for viewing.\n */\nexport interface Metrics {\n  /**\n   * Track a newly opened multiaddr connection\n   */\n  trackMultiaddrConnection(maConn: MultiaddrConnection): void\n\n  /**\n   * Track a newly opened protocol stream\n   */\n  trackProtocolStream(stream: Stream, connection: Connection): void\n\n  /**\n   * Register an arbitrary metric. Call this to set help/labels for metrics\n   * and update/increment/decrement/etc them by calling methods on the returned\n   * metric object\n   */\n  registerMetric: ((name: string, options?: MetricOptions) => Metric) & ((name: string, options: CalculatedMetricOptions) => void)\n\n  /**\n   * Register a a group of related metrics. Call this to set help/labels for\n   * groups of related metrics that will be updated with by calling `.update`,\n   * `.increment` and/or `.decrement` methods on the returned metric group object\n   */\n  registerMetricGroup: ((name: string, options?: MetricOptions) => MetricGroup) & ((name: string, options: CalculatedMetricOptions<Record<string, number>>) => void)\n\n  /**\n   * Register an arbitrary counter. Call this to set help/labels for counters\n   * and increment them by calling methods on the returned counter object\n   */\n  registerCounter: ((name: string, options?: MetricOptions) => Counter) & ((name: string, options: CalculatedMetricOptions) => void)\n\n  /**\n   * Register a a group of related counters. Call this to set help/labels for\n   * groups of related counters that will be updated with by calling the `.increment`\n   * method on the returned counter group object\n   */\n  registerCounterGroup: ((name: string, options?: MetricOptions) => CounterGroup) & ((name: string, options: CalculatedMetricOptions<Record<string, number>>) => void)\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}