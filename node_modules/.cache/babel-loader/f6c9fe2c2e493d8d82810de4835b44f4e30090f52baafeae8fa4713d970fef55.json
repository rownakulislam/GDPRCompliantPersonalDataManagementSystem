{"ast":null,"code":"var _jsxFileName = \"C:\\\\thesis_project_start\\\\Ethereum-DappV2\\\\src\\\\View.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { create } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = create({\n  host: '127.0.0.1',\n  port: 5001,\n  protocol: 'http'\n});\nfunction ViewComponent() {\n  _s();\n  const [userAddress, setUserAddress] = useState('');\n  const [fileUrl, setFileUrl] = useState(null);\n  //const [recipientAddress, setRecipientAddress] = useState('');\n\n  const CONTRACT_ADDRESS = \"0x56543E1324a0E83Dfa6FF44F45a1593aFFb6Cd0f\";\n  const API_KEY = \"rdO0i4o--THH81mB5V3Cb9SE1UiwCtrh\";\n  const PRIVATE_KEYA = \"ffce87da659a88c5ad63d447fff3be4308b00845bf002861ba91ad0ce5994603\";\n  const PRIVATE_KEY1 = \"36ac196f099cc8a7d05ef87545c835220f0607a05baf8d48a712a8afbfbddef3\";\n  const network = 'maticmum';\n  const provider = new ethers.providers.AlchemyProvider(network, API_KEY);\n  const signer = new ethers.Wallet(PRIVATE_KEY1, provider);\n  console.log(signer.address);\n  const contractABI = require('./abis/Temp.json');\n  const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\n  async function fetchFileFromIPFS() {\n    try {\n      console.log(\"here\");\n      const userData = await contract.getUserData(userAddress);\n      console.log(userData);\n      const stream = client.cat(userData);\n      let data = [];\n      for await (const chunk of stream) {\n        data.push(chunk);\n      }\n      const blob = new Blob(data, {\n        type: 'image/jpeg'\n      });\n      const url = URL.createObjectURL(blob);\n      setFileUrl(url);\n    } catch (error) {\n      console.error('Error fetching file from IPFS:', error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Your Address\",\n      onChange: e => setUserAddress(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchFileFromIPFS,\n      children: \"Fetch File from IPFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), fileUrl && /*#__PURE__*/_jsxDEV(\"a\", {\n      href: fileUrl,\n      download: true,\n      children: \"Download File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(ViewComponent, \"SJJNoQLzCzdFs5ZuHRm6OBf6/gQ=\");\n_c = ViewComponent;\nexport default ViewComponent;\nvar _c;\n$RefreshReg$(_c, \"ViewComponent\");","map":{"version":3,"names":["React","useState","ethers","create","jsxDEV","_jsxDEV","client","host","port","protocol","ViewComponent","_s","userAddress","setUserAddress","fileUrl","setFileUrl","CONTRACT_ADDRESS","API_KEY","PRIVATE_KEYA","PRIVATE_KEY1","network","provider","providers","AlchemyProvider","signer","Wallet","console","log","address","contractABI","require","contract","Contract","fetchFileFromIPFS","userData","getUserData","stream","cat","data","chunk","push","blob","Blob","type","url","URL","createObjectURL","error","children","placeholder","onChange","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","onClick","href","download","_c","$RefreshReg$"],"sources":["C:/thesis_project_start/Ethereum-DappV2/src/View.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { create } from 'ipfs-http-client';\r\n\r\nconst client = create({\r\n  host: '127.0.0.1',\r\n  port: 5001,\r\n  protocol: 'http',\r\n});\r\n\r\nfunction ViewComponent() {\r\n  const [userAddress, setUserAddress] = useState('');\r\n  const [fileUrl, setFileUrl] = useState(null);\r\n  //const [recipientAddress, setRecipientAddress] = useState('');\r\n\r\n  const CONTRACT_ADDRESS = \"0x56543E1324a0E83Dfa6FF44F45a1593aFFb6Cd0f\";  \r\n  const API_KEY = \"rdO0i4o--THH81mB5V3Cb9SE1UiwCtrh\";\r\n  const PRIVATE_KEYA = \"ffce87da659a88c5ad63d447fff3be4308b00845bf002861ba91ad0ce5994603\";\r\n  const PRIVATE_KEY1=\"36ac196f099cc8a7d05ef87545c835220f0607a05baf8d48a712a8afbfbddef3\";\r\n\r\n\r\n  const network = 'maticmum';\r\n  const provider = new ethers.providers.AlchemyProvider(network, API_KEY);\r\n  const signer = new ethers.Wallet(PRIVATE_KEY1, provider);\r\n\r\n  \r\n  console.log(signer.address);\r\n\r\n  const contractABI = require('./abis/Temp.json');\r\n  const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\r\n\r\n  async function fetchFileFromIPFS() {\r\n    try {\r\n      console.log(\"here\");\r\n      const userData = await contract.getUserData(userAddress);\r\n      console.log(userData);\r\n      const stream = client.cat(userData);\r\n      let data = [];\r\n\r\n      for await (const chunk of stream) {\r\n        data.push(chunk);\r\n      }\r\n\r\n      const blob = new Blob(data, { type: 'image/jpeg' });\r\n      const url = URL.createObjectURL(blob);\r\n      setFileUrl(url);\r\n    } catch (error) {\r\n      console.error('Error fetching file from IPFS:', error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Your Address\"\r\n        onChange={(e) => setUserAddress(e.target.value)}\r\n      />\r\n      \r\n      <button onClick={fetchFileFromIPFS}>Fetch File from IPFS</button>\r\n      {fileUrl && <a href={fileUrl} download>Download File</a>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}